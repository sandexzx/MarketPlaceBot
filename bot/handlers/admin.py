from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.orm import Session
from sqlalchemy import select, func
from datetime import datetime

from ..database.models import Advertisement, Photo
from ..keyboards import admin_kb
from ..utils.states import AdminStates, EditStates
from ..config import ADMIN_IDS
from .user import cmd_start

router = Router()

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
@router.message.middleware()
@router.callback_query.middleware()
async def admin_middleware(handler, event, data):
    user_id = event.from_user.id
    if user_id not in ADMIN_IDS:
        await event.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    return await handler(event, data)

# –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
@router.message(Command("admin"))
async def admin_panel(message: Message):
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=admin_kb.get_admin_main_kb()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_add_ad(message: Message, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_photos)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=admin_kb.get_photo_upload_kb()
    )

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@router.message(AdminStates.waiting_for_photos, F.photo)
async def process_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    await message.answer(
        f"‚úÖ –§–æ—Ç–æ #{len(photos)} –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=admin_kb.get_photo_upload_kb()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    )

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
@router.message(AdminStates.waiting_for_photos, F.text == "–ì–æ—Ç–æ–≤–æ")
async def photos_uploaded(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("photos"):
        await message.answer("‚ùå –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
        return
    
    await state.set_state(AdminStates.waiting_for_description)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()  # –í–æ—Ç —Ç—É—Ç –∑–∞–º–µ–Ω–∞!
    )

# –ü—Ä–∏—ë–º –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.message(AdminStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É"""
    await state.update_data(description=message.text)
    await state.set_state(AdminStates.waiting_for_price)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

# –ü—Ä–∏—ë–º —Ü–µ–Ω—ã
@router.message(AdminStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(price=price)
    await state.set_state(AdminStates.waiting_for_manager)
    await message.answer("üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")

# –ü—Ä–∏—ë–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
@router.message(AdminStates.waiting_for_manager)
async def process_manager_link(message: Message, state: FSMContext, session: Session):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.update_data(manager_link=message.text)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = (
        "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{data['description']}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']:,.2f} ‚ÇΩ\n\n"
        f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {data['manager_link']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Ñ–æ—Ç–æ–∫
    media_group = [
        InputMediaPhoto(media=photo_id)
        for photo_id in data['photos'][:-1]  # –ë–µ—Ä–µ–º –≤—Å–µ —Ñ–æ—Ç–∫–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –æ–ø–∏—Å–∞–Ω–∏—è
    media_group.append(
        InputMediaPhoto(
            media=data['photos'][-1],
            caption=preview_text
        )
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    sent_messages = await message.answer_media_group(media_group)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_kb.get_confirm_kb()
    )

    await state.set_state(AdminStates.confirm_creation)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.message(F.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def list_ads_for_edit(message: Message, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    ads = session.scalars(select(Advertisement).order_by(Advertisement.created_at.desc())).all()
    
    if not ads:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return

    text = "üìù –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for ad in ads:
        text += f"ID {ad.id}: {ad.description[:50]}...\n"
        text += f"üí∞ –¶–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ\n\n"

    await message.answer(text, reply_markup=admin_kb.get_ads_list_kb(ads))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_ad_"))
async def show_edit_options(callback: CallbackQuery, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    ad_id = int(callback.data.split('_')[2])
    ad = session.get(Advertisement, ad_id)
    
    if not ad:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await callback.message.edit_text(
        f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID{ad.id}\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {ad.description[:100]}...\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=admin_kb.get_edit_ad_kb(ad_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_photos_"))
async def start_edit_photos(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    ad_id = int(callback.data.split('_')[2])
    await state.update_data(editing_ad_id=ad_id)
    await state.set_state(EditStates.edit_photos)
    
    await callback.message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=admin_kb.get_photo_upload_kb()
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
@router.callback_query(AdminStates.confirm_creation, F.data == "confirm")
async def confirm_creation(callback: CallbackQuery, state: FSMContext, session: Session):
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    ad = Advertisement(
        description=data["description"],
        price=float(data["price"]),
        manager_link=data["manager_link"]
    )
    session.add(ad)
    session.flush()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫–∏
    for idx, photo_id in enumerate(data["photos"]):
        photo = Photo(
            advertisement_id=ad.id,
            photo_file_id=photo_id,
            position=idx
        )
        session.add(photo)
    
    session.commit()
    
    await state.clear()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    await callback.message.delete()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É
    await admin_panel(callback.message)

@router.callback_query(AdminStates.confirm_creation, F.data == "cancel")
async def cancel_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.clear()
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    await callback.message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ!")
    await admin_panel(callback.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω–∫—É

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def list_ads_for_delete(message: Message, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    ads = session.scalars(select(Advertisement).order_by(Advertisement.created_at.desc())).all()
    
    if not ads:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return

    text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for ad in ads:
        text += f"ID {ad.id}: {ad.description[:50]}...\n"
        text += f"üí∞ –¶–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ\n\n"

    await message.answer(text, reply_markup=admin_kb.get_delete_ads_kb(ads))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_ad_"))
async def confirm_delete_ad(callback: CallbackQuery, session: Session):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    ad_id = int(callback.data.split('_')[2])
    ad = session.get(Advertisement, ad_id)
    
    if not ad:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID{ad_id}?\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {ad.description[:100]}...\n"
        f"–¶–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ",
        reply_markup=admin_kb.get_delete_confirm_kb(ad_id)
    )

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_ad(callback: CallbackQuery, session: Session):
    """–£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã"""
    ad_id = int(callback.data.split('_')[2])
    ad = session.get(Advertisement, ad_id)
    
    if ad:
        session.delete(ad)
        session.commit()
        await callback.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º"""
    total_ads = session.scalar(select(func.count()).select_from(Advertisement))
    total_photos = session.scalar(select(func.count()).select_from(Photo))
    
    # –°–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    most_expensive = session.scalar(
        select(Advertisement)
        .order_by(Advertisement.price.desc())
        .limit(1)
    )
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üìù –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_ads}\n"
        f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_photos}\n"
        f"üí∞ –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞: {most_expensive.price:,.2f} ‚ÇΩ\n" if most_expensive else ""
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(stats_text)

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", 
        reply_markup=ReplyKeyboardRemove()
    )
    await admin_panel(message)

@router.message(F.text == "üîô –í—ã—Ö–æ–¥")
async def exit_admin(message: Message):
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await message.answer(
        "üëã –í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", 
        reply_markup=ReplyKeyboardRemove()
    )
    # –ü–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É start
    await cmd_start(message)

@router.message(EditStates.edit_photos, F.photo)
async def process_edit_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    data = await state.get_data()
    photos = data.get("new_photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(new_photos=photos)
    await message.answer(f"‚úÖ –§–æ—Ç–æ #{len(photos)} –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'")

@router.message(EditStates.edit_photos, F.text == "–ì–æ—Ç–æ–≤–æ")
async def save_edited_photos(message: Message, state: FSMContext, session: Session):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ"""
    data = await state.get_data()
    if not data.get("new_photos"):
        await message.answer("‚ùå –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
        return
        
    ad_id = data["editing_ad_id"]
    ad = session.get(Advertisement, ad_id)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ
    session.query(Photo).filter(Photo.advertisement_id == ad_id).delete()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    for idx, photo_id in enumerate(data["new_photos"]):
        photo = Photo(
            advertisement_id=ad_id,
            photo_file_id=photo_id,
            position=idx
        )
        session.add(photo)
        
    session.commit()
    await state.clear()
    await message.answer(
        "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", 
        reply_markup=ReplyKeyboardRemove()
    )
    await admin_panel(message)

@router.callback_query(F.data.startswith("edit_desc_"))
async def start_edit_description(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è"""
    ad_id = int(callback.data.split('_')[2])
    await state.update_data(editing_ad_id=ad_id)
    await state.set_state(EditStates.edit_description)
    
    await callback.message.answer(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", 
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], 
            resize_keyboard=True
        )
    )

@router.message(EditStates.edit_description)
async def save_edited_description(message: Message, state: FSMContext, session: Session):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
    data = await state.get_data()
    ad_id = data["editing_ad_id"]
    ad = session.get(Advertisement, ad_id)
    
    if ad:
        ad.description = message.text
        session.commit()
        await state.clear()
        await message.answer(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", 
            reply_markup=ReplyKeyboardRemove()
        )
        await admin_panel(message)

@router.callback_query(F.data.startswith("edit_price_"))
async def start_edit_price(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    ad_id = int(callback.data.split('_')[2])
    await state.update_data(editing_ad_id=ad_id)
    await state.set_state(EditStates.edit_price)
    
    await callback.message.answer(
        "üí∞ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], 
            resize_keyboard=True
        )
    )

@router.message(EditStates.edit_price)
async def save_edited_price(message: Message, state: FSMContext, session: Session):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
            
        data = await state.get_data()
        ad_id = data["editing_ad_id"]
        ad = session.get(Advertisement, ad_id)
        
        if ad:
            ad.price = price
            session.commit()
            await state.clear()
            await message.answer(
                "‚úÖ –¶–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", 
                reply_markup=ReplyKeyboardRemove()
            )
            await admin_panel(message)
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")

@router.callback_query(F.data.startswith("edit_manager_"))
async def start_edit_manager(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    ad_id = int(callback.data.split('_')[2])
    await state.update_data(editing_ad_id=ad_id)
    await state.set_state(EditStates.edit_manager)
    
    await callback.message.answer(
        "üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]], 
            resize_keyboard=True
        )
    )

@router.message(EditStates.edit_manager)
async def save_edited_manager(message: Message, state: FSMContext, session: Session):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    data = await state.get_data()
    ad_id = data["editing_ad_id"]
    ad = session.get(Advertisement, ad_id)
    
    if ad:
        ad.manager_link = message.text
        session.commit()
        await state.clear()
        await message.answer(
            "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", 
            reply_markup=ReplyKeyboardRemove()
        )
        await admin_panel(message)

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    await state.clear()
    await callback.message.delete()
    await admin_panel(callback.message)