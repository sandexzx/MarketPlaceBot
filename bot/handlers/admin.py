from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from sqlalchemy.orm import Session
from sqlalchemy import select, func
from datetime import datetime

from ..database.models import Advertisement, Photo
from ..keyboards import admin_kb
from ..utils.states import AdminStates, EditStates
from ..config import ADMIN_IDS

router = Router()

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
@router.message.middleware()
@router.callback_query.middleware()
async def admin_middleware(handler, event, data):
    user_id = event.from_user.id
    if user_id not in ADMIN_IDS:
        await event.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    return await handler(event, data)

# –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É
@router.message(Command("admin"))
async def admin_panel(message: Message):
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=admin_kb.get_admin_main_kb()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def start_add_ad(message: Message, state: FSMContext):
    await state.set_state(AdminStates.waiting_for_photos)
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ).\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=admin_kb.get_photo_upload_kb()
    )

# –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@router.message(AdminStates.waiting_for_photos, F.photo)
async def process_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    await message.answer(f"‚úÖ –§–æ—Ç–æ #{len(photos)} –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
@router.message(AdminStates.waiting_for_photos, F.text == "–ì–æ—Ç–æ–≤–æ")
async def photos_uploaded(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("photos"):
        await message.answer("‚ùå –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
        return
    
    await state.set_state(AdminStates.waiting_for_description)
    await message.answer(
        "üìù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:",
        reply_markup=None
    )

# –ü—Ä–∏—ë–º –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.message(AdminStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É"""
    await state.update_data(description=message.text)
    await state.set_state(AdminStates.waiting_for_price)
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

# –ü—Ä–∏—ë–º —Ü–µ–Ω—ã
@router.message(AdminStates.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return

    await state.update_data(price=price)
    await state.set_state(AdminStates.waiting_for_manager)
    await message.answer("üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")

# –ü—Ä–∏—ë–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
@router.message(AdminStates.waiting_for_manager)
async def process_manager_link(message: Message, state: FSMContext, session: Session):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    await state.update_data(manager_link=message.text)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = (
        "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{data['description']}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {data['price']:,.2f} ‚ÇΩ\n\n"
        f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {data['manager_link']}\n\n"
        "–í—Å–µ –≤–µ—Ä–Ω–æ?"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º
    await message.answer_photo(
        photo=data['photos'][0],
        caption=preview_text,
        reply_markup=admin_kb.get_confirm_kb()
    )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
    if len(data['photos']) > 1:
        media_group = [
            InputMediaPhoto(media=photo_id)
            for photo_id in data['photos'][1:]
        ]
        await message.answer_media_group(media_group)

    await state.set_state(AdminStates.confirm_creation)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.message(F.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def list_ads_for_edit(message: Message, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    ads = session.scalars(select(Advertisement).order_by(Advertisement.created_at.desc())).all()
    
    if not ads:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return

    text = "üìù –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
    for ad in ads:
        text += f"ID {ad.id}: {ad.description[:50]}...\n"
        text += f"üí∞ –¶–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ\n\n"

    await message.answer(text, reply_markup=admin_kb.get_ads_list_kb(ads))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_ad_"))
async def show_edit_options(callback: CallbackQuery, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
    ad_id = int(callback.data.split('_')[2])
    ad = session.get(Advertisement, ad_id)
    
    if not ad:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await callback.message.edit_text(
        f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID{ad.id}\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {ad.description[:100]}...\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=admin_kb.get_edit_ad_kb(ad_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_photos_"))
async def start_edit_photos(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    ad_id = int(callback.data.split('_')[2])
    await state.update_data(editing_ad_id=ad_id)
    await state.set_state(EditStates.edit_photos)
    
    await callback.message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'",
        reply_markup=admin_kb.get_photo_upload_kb()
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
@router.callback_query(AdminStates.confirm_creation, F.data == "confirm")
async def confirm_creation(callback: CallbackQuery, state: FSMContext, session: Session):
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    ad = Advertisement(
        description=data["description"],
        price=float(data["price"]),
        manager_link=data["manager_link"]
    )
    session.add(ad)
    session.flush()  # –ü–æ–ª—É—á–∞–µ–º id –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫–∏
    for idx, photo_id in enumerate(data["photos"]):
        photo = Photo(
            advertisement_id=ad.id,
            photo_file_id=photo_id,
            position=idx
        )
        session.add(photo)
    
    session.commit()
    
    await state.clear()
    await callback.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@router.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def list_ads_for_delete(message: Message, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    ads = session.scalars(select(Advertisement).order_by(Advertisement.created_at.desc())).all()
    
    if not ads:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
        return

    text = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    for ad in ads:
        text += f"ID {ad.id}: {ad.description[:50]}...\n"
        text += f"üí∞ –¶–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ\n\n"

    await message.answer(text, reply_markup=admin_kb.get_delete_ads_kb(ads))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_ad_"))
async def confirm_delete_ad(callback: CallbackQuery, session: Session):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    ad_id = int(callback.data.split('_')[2])
    ad = session.get(Advertisement, ad_id)
    
    if not ad:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return

    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID{ad_id}?\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {ad.description[:100]}...\n"
        f"–¶–µ–Ω–∞: {ad.price:,.2f} ‚ÇΩ",
        reply_markup=admin_kb.get_delete_confirm_kb(ad_id)
    )

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_ad(callback: CallbackQuery, session: Session):
    """–£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã"""
    ad_id = int(callback.data.split('_')[2])
    ad = session.get(Advertisement, ad_id)
    
    if ad:
        session.delete(ad)
        session.commit()
        await callback.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    else:
        await callback.answer("‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message, session: Session):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º"""
    total_ads = session.scalar(select(func.count()).select_from(Advertisement))
    total_photos = session.scalar(select(func.count()).select_from(Photo))
    
    # –°–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    most_expensive = session.scalar(
        select(Advertisement)
        .order_by(Advertisement.price.desc())
        .limit(1)
    )
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
        f"üìù –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_ads}\n"
        f"üì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {total_photos}\n"
        f"üí∞ –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞: {most_expensive.price:,.2f} ‚ÇΩ\n" if most_expensive else ""
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await message.answer(stats_text)