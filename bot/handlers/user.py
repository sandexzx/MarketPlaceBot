from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from sqlalchemy.orm import Session
from sqlalchemy import select, func

from ..database.models import Advertisement, Photo
from ..keyboards import user_kb
from ..utils import messages
from ..database.models import User
from ..config import WELCOME_IMAGE
from pathlib import Path
from aiogram.types import FSInputFile
import logging

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        session.add(user)
        session.commit()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if Path(WELCOME_IMAGE).exists():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é
            await message.answer_photo(
                photo=FSInputFile(WELCOME_IMAGE),
                caption=messages.WELCOME_MESSAGE,
                reply_markup=user_kb.get_start_kb()
            )
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                messages.WELCOME_MESSAGE,
                reply_markup=user_kb.get_start_kb()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await message.answer(
            messages.WELCOME_MESSAGE,
            reply_markup=user_kb.get_start_kb()
        )


@router.callback_query(F.data == "show_ads")
async def show_first_ad(callback: CallbackQuery, session: Session):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    query = select(Advertisement).order_by(Advertisement.created_at.desc())
    ads = session.scalars(query).all()
    
    if not ads:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ —Å–ø–∏—Å–æ–∫ ads
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await callback.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            messages.NO_ADS_MESSAGE,
            reply_markup=user_kb.get_start_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_advertisement(
        callback.message,
        ads[0],
        session,
        current_position=1,
        total_ads=len(ads),
        edit=True
    )

async def show_advertisement(message, ad, session, current_position, total_ads, edit=False):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π ad.id –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    photos = session.scalars(
        select(Photo)
        .where(Photo.advertisement_id == ad.id)
        .order_by(Photo.position)
    ).all()
    
    # –ï—Å–ª–∏ —É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if not photos:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: —É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!\n\n{format_ad_description(ad)}",
            reply_markup=user_kb.get_navigation_kb(current_position, total_ads, ad.id)
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ ad.id
    navigation_kb = user_kb.get_navigation_kb(current_position, total_ads, ad.id, ad.is_promotional)

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
    if len(photos) == 1:
        if edit:
            await message.delete()
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=photos[0].photo_file_id,
                caption=format_ad_description(ad),
                reply_markup=navigation_kb
            )
        else:
            await message.answer_photo(
                photo=photos[0].photo_file_id,
                caption=format_ad_description(ad),
                reply_markup=navigation_kb
            )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        media_group = [
            InputMediaPhoto(media=photo.photo_file_id)
            for photo in photos
        ]
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ
        media_group[-1].caption = format_ad_description(ad)
        
        if edit:
            await message.delete()
            bot = message.bot
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            await bot.send_media_group(chat_id=message.chat.id, media=media_group)
            # –û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=navigation_kb
            )
        else:
            await message.answer_media_group(media_group)
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=navigation_kb
            )

def format_ad_description(ad: Advertisement) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ (–æ–±—ã—á–Ω–æ–µ/—Ä–µ–∫–ª–∞–º–Ω–æ–µ)
    """
    if ad.is_promotional:
        return f"üì¢ –†–ï–ö–õ–ê–ú–ê\n\n{ad.description}"
    else:
        return (
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ad.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {ad.price}\n"
        )

@router.callback_query(F.data.startswith(("next_", "prev_")))
async def navigate_ads(callback: CallbackQuery, session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ/–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    """
    action, ad_id_str = callback.data.split("_")
    ad_id = int(ad_id_str)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    query = select(Advertisement).order_by(Advertisement.created_at.desc())
    ads = session.scalars(query).all()
    
    if not ads:
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç! ü§∑‚Äç‚ôÇÔ∏è")
        return

    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º ad_id
    current_index = next((i for i, ad in enumerate(ads) if ad.id == ad_id), None)
    
    if current_index is None:
        # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if ads:
            await show_advertisement(
                callback.message,
                ads[0],
                session,
                current_position=1,
                total_ads=len(ads),
                edit=True
            )
        return
    
    if action == "next":
        next_index = current_index + 1
        if next_index >= len(ads):
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! ü§∑‚Äç‚ôÇÔ∏è")
            return
    else:  # prev
        next_index = current_index - 1
        if next_index < 0:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! ü§∑‚Äç‚ôÇÔ∏è")
            return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—â–µ–º—É/–ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
    await show_advertisement(
        callback.message,
        ads[next_index],
        session,
        current_position=next_index + 1,
        total_ads=len(ads),
        edit=True
    )

@router.callback_query(F.data.startswith("rent_"))
async def rent_ad(callback: CallbackQuery, session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    """
    ad_id = int(callback.data.split("_")[1])
    ad = session.get(Advertisement, ad_id)
    
    if not ad:
        await callback.answer("–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ! üò¢")
        return
        
    await callback.message.answer(
        f"üë§ –î–ª—è –∞—Ä–µ–Ω–¥—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n{ad.manager_link}"
    )

@router.message(Command("notifications"))
async def toggle_notifications(message: Message, session: Session):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        return
        
    user.notifications_enabled = not user.notifications_enabled
    session.commit()
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if user.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö {status}")

@router.message(Command("ads"))
async def cmd_ads(message: Message, session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ads
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    query = select(Advertisement).order_by(Advertisement.created_at.desc())
    ads = session.scalars(query).all()
    
    if not ads:
        await message.answer(
            messages.NO_ADS_MESSAGE,
            reply_markup=user_kb.get_start_kb()
        )
        return
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_advertisement(
        message,
        ads[0],
        session,
        current_position=1,
        total_ads=len(ads)
    )

@router.callback_query(F.data.startswith("view_ad_"))
async def view_specific_ad(callback: CallbackQuery, session: Session):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    ad_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID
    ad = session.get(Advertisement, ad_id)
    if not ad:
        await callback.answer("–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ üò¢")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await show_first_ad(callback, session)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    total_ads = session.scalar(select(func.count()).select_from(Advertisement))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    current_position = session.scalar(
        select(func.count())
        .select_from(Advertisement)
        .where(Advertisement.created_at >= ad.created_at)
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_advertisement(
        callback.message,
        ad,
        session,
        current_position=current_position,
        total_ads=total_ads,
        edit=True
    )