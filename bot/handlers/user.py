from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from sqlalchemy.orm import Session
from sqlalchemy import select, func
from datetime import datetime
from pathlib import Path
from aiogram.types import FSInputFile
import logging
import random
from sqlalchemy import or_
from aiogram.fsm.context import FSMContext
from ..utils.states import UserStates


from ..database.models import Advertisement, Photo
from ..keyboards import user_kb
from ..utils import messages
from ..database.models import User
from ..config import WELCOME_IMAGE


router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        session.add(user)
        session.commit()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        if Path(WELCOME_IMAGE).exists():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ø–æ–¥–ø–∏—Å—å—é
            await message.answer_photo(
                photo=FSInputFile(WELCOME_IMAGE),
                caption=messages.WELCOME_MESSAGE,
                reply_markup=user_kb.get_start_kb()
            )
        else:
            # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                messages.WELCOME_MESSAGE,
                reply_markup=user_kb.get_start_kb()
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
        await message.answer(
            messages.WELCOME_MESSAGE,
            reply_markup=user_kb.get_start_kb()
        )


@router.callback_query(F.data == "show_ads")
async def show_first_ad(callback: CallbackQuery, session: Session, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    query = select(Advertisement).where(Advertisement.is_promotional == False).order_by(Advertisement.created_at.desc())
    ads = session.scalars(query).all()
    
    if not ads:
        await callback.message.delete()
        await callback.message.answer(
            messages.NO_ADS_MESSAGE,
            reply_markup=user_kb.get_start_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_advertisement(
        callback.message,
        ads[0],
        session,
        current_position=1,
        total_ads=len(ads),
        edit=True
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ ads —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å—É 0
    await state.set_state(UserStates.viewing_ads)
    await state.update_data(current_index=0, total_ads=len(ads))

async def show_advertisement(message, ad, session, current_position, total_ads, edit=False):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π ad.id –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
    ad.views_count += 1
    ad.last_shown = datetime.utcnow()
    session.commit()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    photos = session.scalars(
        select(Photo)
        .where(Photo.advertisement_id == ad.id)
        .order_by(Photo.position)
    ).all()
    
    # –ï—Å–ª–∏ —É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if not photos:
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: —É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!\n\n{format_ad_description(ad)}",
            reply_markup=user_kb.get_navigation_kb(current_position, total_ads, ad.id)
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ ad.id
    navigation_kb = user_kb.get_navigation_kb(current_position, total_ads, ad.id, ad.is_promotional)

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
    if len(photos) == 1:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ
        if len(photos) == 1:
            if edit:
                await message.delete()
                await message.bot.send_photo(
                    chat_id=message.chat.id,
                    photo=photos[0].photo_file_id,
                    caption=format_ad_description(ad),
                    parse_mode='Markdown'
                )

                await message.bot.send_message(
                    chat_id=message.chat.id,
                    text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=navigation_kb
                )
            else:
                await message.answer_photo(
                    photo=photos[0].photo_file_id,
                    caption=format_ad_description(ad)
                )
                await message.answer(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    reply_markup=navigation_kb
                )
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ
        media_group = [
            InputMediaPhoto(media=photo.photo_file_id)
            for photo in photos
        ]
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ñ–æ—Ç–æ
        media_group[-1] = InputMediaPhoto(
            media=media_group[-1].media,
            caption=format_ad_description(ad),
            parse_mode='Markdown'
        )

        if edit:
            await message.delete()
            bot = message.bot
            await bot.send_media_group(chat_id=message.chat.id, media=media_group)
            await bot.send_message(
                chat_id=message.chat.id,
                text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=navigation_kb,
                parse_mode='Markdown'
            )
        else:
            await message.answer_media_group(media_group)
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=navigation_kb,
                parse_mode='Markdown'
            )


def format_ad_description(ad: Advertisement) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Ç–∏–ø–∞ (–æ–±—ã—á–Ω–æ–µ/—Ä–µ–∫–ª–∞–º–Ω–æ–µ)
    """
    if ad.is_promotional:
        return f"üì¢ –†–ï–ö–õ–ê–ú–ê\n\n{ad.description}"
    else:
        return (
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{ad.description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {ad.price}\n"
        )

@router.callback_query(F.data.startswith(("next_", "prev_")))
async def navigate_ads(callback: CallbackQuery, session: Session, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ/–ø—Ä–µ–¥—ã–¥—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å —à–∞–Ω—Å–æ–º –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
    """
    action, ad_id_str = callback.data.split("_")
    ad_id = int(ad_id_str)

    data = await state.get_data()
    current_index = data.get("current_index", 0)
    total_ads = data.get("total_ads", 0)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ã—á–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    regular_ads = session.scalars(
        select(Advertisement)
        .where(Advertisement.is_promotional == False)
        .order_by(Advertisement.created_at.desc())
    ).all()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    promo_ads = session.scalars(
        select(Advertisement)
        .where(Advertisement.is_promotional == True)
        .order_by(Advertisement.created_at.desc())
    ).all()

    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    # –ï—Å–ª–∏ —á–∏—Å–ª–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–≤–µ—Ä–∏–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å current_index
    if current_index >= len(regular_ads):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä—è–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–∏–ª–∏),
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ 0
        current_index = 0

    # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if not regular_ads:
        await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç! ü§∑‚Äç‚ôÇÔ∏è")
        return

    # –î–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "next":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –∫–æ–Ω—Ü–∞
        if current_index < len(regular_ads) - 1:
            current_index += 1
        else:
            await callback.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! ü§∑‚Äç‚ôÇÔ∏è")
            return
    else:  # prev
        if current_index > 0:
            current_index -= 1
        else:
            await callback.answer("–≠—Ç–æ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! ü§∑‚Äç‚ôÇÔ∏è")
            return

    # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 20% –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤–ø–µ—Ä–µ–¥,
    # –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ "next"
    show_promo = (action == "next") and (random.random() < 0.2) and promo_ads

    if show_promo:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        ad_to_show = random.choice(promo_ads)
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–∑–∞–¥, —Ç.–∫. –ø–æ—Å–ª–µ —Ä–µ–∫–ª–∞–º—ã –¥–æ–ª–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–µ–µ –æ–±—ã—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        if action == "next":
            current_index -= 1  # –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º increment, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–¥–µ–ª–∞–Ω —Ä–∞–Ω–µ–µ
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–µ –æ–±—ã—á–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
        ad_to_show = regular_ads[current_index]

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_advertisement(
        callback.message,
        ad_to_show,
        session,
        current_position=(current_index + 1),
        total_ads=len(regular_ads),
        edit=True
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    await state.update_data(current_index=current_index, total_ads=len(regular_ads))


@router.callback_query(F.data.startswith("rent_"))
async def rent_ad(callback: CallbackQuery, session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å"
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    """
    ad_id = int(callback.data.split("_")[1])
    ad = session.get(Advertisement, ad_id)
    
    if not ad:
        await callback.answer("–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ! üò¢")
        return
        
    await callback.message.answer(
        f"üë§ –î–ª—è –∞—Ä–µ–Ω–¥—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n{ad.manager_link}"
    )

@router.message(Command("notifications"))
async def toggle_notifications(message: Message, session: Session):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user = session.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user:
        return
        
    user.notifications_enabled = not user.notifications_enabled
    session.commit()
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if user.notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    await message.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö {status}")

@router.message(Command("ads"))
async def cmd_ads(message: Message, session: Session):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ads
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    query = select(Advertisement).order_by(Advertisement.created_at.desc())
    ads = session.scalars(query).all()
    
    if not ads:
        await message.answer(
            messages.NO_ADS_MESSAGE,
            reply_markup=user_kb.get_start_kb()
        )
        return
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_advertisement(
        message,
        ads[0],
        session,
        current_position=1,
        total_ads=len(ads)
    )

@router.callback_query(F.data.startswith("view_ad_"))
async def view_specific_ad(callback: CallbackQuery, session: Session):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    ad_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ ID
    ad = session.get(Advertisement, ad_id)
    if not ad:
        await callback.answer("–£–ø—Å! –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ üò¢")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await show_first_ad(callback, session)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    total_ads = session.scalar(select(func.count()).select_from(Advertisement))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    current_position = session.scalar(
        select(func.count())
        .select_from(Advertisement)
        .where(Advertisement.created_at >= ad.created_at)
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    await show_advertisement(
        callback.message,
        ad,
        session,
        current_position=current_position,
        total_ads=total_ads,
        edit=True
    )